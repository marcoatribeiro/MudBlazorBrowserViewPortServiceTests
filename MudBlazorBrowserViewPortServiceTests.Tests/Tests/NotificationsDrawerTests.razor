@using MudBlazor.Services
@using Moq
@inherits TestContext

@code {
    private readonly FallbackServiceProvider _serviceProvider = new();

    public NotificationsDrawerTests()
    {
        this.AddTestServicesAndFallbackServiceProvider(_serviceProvider);
    }

    [Fact]
    public void ShouldRenderAndClose()
    {
        var closed = false;
        void OpenChangedHandler(bool args) => closed = !args;

        // Why does this work...
        JSInterop.Setup<BrowserWindowSize>("mudResizeListener.getBrowserWindowSize").SetResult(new BrowserWindowSize { Width = 960, Height = 720 });

        // ... but this does not?
        //_serviceProvider.BrowserViewportServiceMock.Setup(m => m.GetCurrentBrowserWindowSizeAsync())
        //    .ReturnsAsync(new BrowserWindowSize { Width = 960, Height = 720 });

        // The below used to work, when mocking IResizeService
        //_serviceProvider.ResizeServiceMock.Setup(m => m.GetBrowserWindowSize())
        //    .ReturnsAsync(new BrowserWindowSize { Width = 960, Height = 720 });


        var cut = Render(@<NotificationsDrawer Open="@(!closed)" OpenChanged="@OpenChangedHandler" />);

        cut.HasComponent<MudOverlay>().Should().BeTrue();
        cut.FindComponents<MudOverlay>().Should().HaveCount(2);
        var mudOverlay = cut.FindComponents<MudOverlay>().Last().Instance;
        mudOverlay.Class.Should().Contain("drawer-overlay");

        closed.Should().BeFalse();

        var closeButton = cut.Find("div.mud-drawer-header > button.mud-icon-button");
        closeButton.Click();

        closed.Should().BeTrue();
    }
}